package vue;

import java.awt.event.MouseEvent;

import org.eclipse.swt.graphics.Color;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.RowLayout;
import org.eclipse.swt.widgets.*;
import org.eclipse.swt.*;
import org.json.JSONObject;


import socket.SocketMessage;
 

public class Fenetre {
	Display display ;
	Shell shell ;
	Canvas streamArea;
	Label buttonCommands;
	Button altUp;
	Button altDown;
	Button rotateClock;
	Button rotateUnclock;
	Button orientFront;
	Button orientBack;
	Button orientLeft;
	Button orientRight;
	
	public Fenetre(){
		
		
		display = new Display();
		shell= new Shell(display, SWT.SHELL_TRIM & (~SWT.RESIZE) & (~SWT.MAX));
		shell.setText("Drone Control");
		shell.setSize(FenetreConstantes.TailleX,FenetreConstantes.TailleY);
		GridLayout gl = new GridLayout(8, true);
	    gl.horizontalSpacing = 0;
	    gl.verticalSpacing = 0;
	    gl.marginBottom = 0;
	    gl.marginTop = 0;
        shell.setLayout(gl);

		initComponents();
		while (!shell.isDisposed()) {
			if (!display.readAndDispatch())
				display.sleep();
		}
 
		display.dispose();
	}
	
	
private void initComponents() {
	
	
	streamArea = new Canvas(shell,SWT.CENTER);
	streamArea.setBackground(new Color (Display.getCurrent(), 255, 0, 0));

   
	altUp = new Button(shell,SWT.CENTER);
	altUp.setText("Up");
	altDown = new Button(shell,SWT.CENTER);
	altDown.setText("Down");
	rotateClock = new Button(shell,SWT.CENTER);
	rotateClock.setText("Clock");
	rotateUnclock = new Button(shell,SWT.CENTER);
	rotateUnclock.setText("Unclock");
	orientFront = new Button(shell,SWT.CENTER);
	orientFront.setText("Front");
	orientBack = new Button(shell,SWT.CENTER);
	orientBack.setText("Back");
	orientLeft = new Button(shell,SWT.CENTER);
	orientLeft.setText("Left");
	orientRight = new Button(shell,SWT.CENTER);
	orientRight.setText("Right");
	refresh();

	altUp.addListener(SWT.Selection, new controller.UpListener());
	altDown.addListener(SWT.Selection, new controller.DownListener());
	rotateClock.addListener(SWT.Selection, new controller.ClockListener());
	rotateUnclock.addListener(SWT.Selection, new controller.UnclockListener());
	orientFront.addListener(SWT.Selection, new controller.FrontListener());
	orientBack.addListener(SWT.Selection, new controller.BackListener());
	orientLeft.addListener(SWT.Selection, new controller.LeftListener());
	orientRight.addListener(SWT.Selection, new controller.RightListener());
	
shell.pack();
shell.open();



    }
public void refresh(){
    GridData gridData = new GridData(SWT.FILL, SWT.FILL, false, false);
    gridData.horizontalSpan = 8;
    gridData.heightHint=shell.getSize().y*15/16;
    gridData.horizontalAlignment = GridData.FILL;
    streamArea.setLayoutData(gridData);
    gridData = new GridData(SWT.FILL, SWT.FILL, false, false);
    gridData.horizontalSpan = 1;
    gridData.heightHint=shell.getSize().y*1/16;
    gridData.widthHint=shell.getSize().x*1/8;
    gridData.horizontalAlignment = GridData.FILL; 	altUp.setLayoutData(gridData);
	altDown.setLayoutData(gridData);
	rotateClock.setLayoutData(gridData);
	rotateUnclock.setLayoutData(gridData);
	orientFront.setLayoutData(gridData);
	orientBack.setLayoutData(gridData);
	orientLeft.setLayoutData(gridData);
	orientRight.setLayoutData(gridData);
	
}

	
/*
public class Fenetre extends JFrame{
	private static final long serialVersionUID = 1L;
	private Color[] cols;
	private int numColor;
	JButton button;
	JPanel pane;
	
	JPanel streamArea;
	JPanel buttonCommands;
	JButton altUp;
	JButton altDown;
	JButton rotateClock;
	JButton rotateUnclock;
	JButton orientFront;
	JButton orientBack;
	JButton orientLeft;
	JButton orientRight;
	public Fenetre(){
		cols=new Color[]{Color.RED,Color.BLACK,Color.BLUE,Color.GREEN,Color.GRAY,Color.CYAN};
		numColor=0;
		this.setSize(400, 600);
		this.setLayout(new GridLayout(2,1));
	    this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	    initComponents();
	    SocketMessage.start(new EventCallback(this));
		this.setVisible(true);
		
	}
	

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
/*    private void initComponents() {

	Label streamArea;
	altUp =
	altDown;
	rotateClock;
	rotateUnclock;
	orientFront;
	orientBack;
	orientLeft;
	orientRight;
	    button= new JButton();
	    pane =new JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Chat");

	    pane.setBackground(cols[numColor]);
	    this.add(pane);
	    this.add(button);


        button.setText("Send");
        button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendButtonActionPerformed(evt);
            }
        });
        
    }*/
    private void SendButtonActionPerformed(java.awt.event.ActionEvent evt) {
    	JSONObject jobj=new JSONObject();	
    	SocketMessage.send("hello",jobj);
    }
	/*
	public void repaint(){
		numColor=(numColor+1) % cols.length;
		pane.setBackground(cols[numColor]);		
	}


}
*/
}